
// Lab2-1.cpp – Листинг программы для Задания №1, 2-ой лабораторной работы
// Вариант 8
//************************************************************************
// Имя файла : Lab2-1.cpp
// Резюме : Пример программы написанной на языке программирования С++
// Описание :  Программа запрашивает значения a и x от пользователя.
// Вычисляет значения выражений  Y(a, x) и Z(a, x). Выводит на консоль
// полученные значения.
// Дата создания : 2022 / 01 / 15
// Автор : Студент НГТУ ИРИТ, Халеев А.А., гр. 21-ИВТз
// Платформа : OS Microsoft Windows, MS Visual Studio 2019 (Community)
// ***********************************************************************

/* Подключение модулей */
#include <stdio.h>
#include <locale.h>
#include <cmath>

/* Прототип функции для инициализации переменной корректным значением */
void CorrectInit(double&);

/* Прототип функции для вычисления значения выражения */
bool Calculate(double&, double);

/* Начало главной функции */
int main() {
	setlocale(LC_ALL, "RUS"); // Вызов функции для отображения русских символов

	/* Логотип программы */
	const  char* logo = "*********************************************************\n\
* Нижегородский государственный технический университет *\n\
* Лабораторная работа №2. Задание 1. Вариант 8.         *\n\
* Выполнил студент группы 21 - ИВТз Халеев Алексей      *\n\
*********************************************************\n";
	printf_s(logo);

	/* Объявление переменных ввода пользователя и результатов вычислений */
	double x, d;

	/* Инициализация переменной x корректным значением, запрашиваемым у пользователя */
	CorrectInit(x);

	/* Запись результатa вычисления выражения в переменную d,
	инициализация переменной completed значением, возвращенным функцией Calculate */
	bool completed = Calculate(d, x);

	if (not completed) { // Если вычисления не произведены
		printf_s("\nZeroDivizionError\n\n"); // вывод сообщения об ошибке
		system("pause"); // Задержка экрана
		return EXIT_FAILURE; // Возврат управления ОС
	}

	/* Вывод на консоль результатов вычислений */
	if (d == 0) printf_s("\nD = 0\n\n");
	else printf_s("\nD = %lf\n\n", d);
	
	system("pause"); // Команда задержки экрана
	return 0; //  Возврат управления ОС в случае успешной работы
} //  END: Конец кода главной функции модуля

void CorrectInit(double& x) {
	// Цель: Инициализация переменной корректным значением
	// Исходные данные:
	//	x – ссылка на переменную
	// Результат: функция ничего не возвращает, переменной присвоено 
	// корректное значение по соответствующей ссылке
	// Вызываемые модули: нет
	/* Описание алгоритма :
	В функции создается бесконечный цикл, продолжающийся, пока
	корректное значение не будет введено.
	1) Объявляется временная переменная tmp типа char;
	2) На консоль выводится приглашение ввести значение переменной,
	при этом указывается, что переменная должна быть вещественным числом.
	3) Пользователь вводит значение, которое присваивается соответствующей
	переменной по ссылке. При этом инициализируется переменная mark которой
	присваивается значение, возвращаемое функцией scanf_s. 
	Правильный ввод	вещественного числа должен быть выполнен с использованием
	запятой(',') в качестве	разделителя дробной и целой части.
	В случае, когда пользователь использует точку ('.') в качестве разделителя,
	переменной x будет присвоена лишь целая	часть желаемого числа, а первый символ
	дробной части присвоится временной переменной tmp.
	4) Производится очистка буфера потока ввода. Это необходимо для того
	чтобы избежать ошибочного считывания данных из буфера при следующей
	итерации в случае неверного ввода. К примеру, без очистки буфера, в
	случае ввода литерала получим бесконечный цикл.
	5) Проверка корректности введенного значения:
	Так как функция scanf_s возвращает значение, равное количеству успешно 
	считанных данных, переменная mark будет содержать информацию о том, была ли
	инициализирована переменная x корректно.
	- если значение mark не равно 1, то переменная х может быть не инициализирована,
	либо инициализирована не верно в случае ввода с точкой в качестве разделителя. 
	В таком случае на консоль выводится сообщение об ошибке, затем цикл повторяется;
	- иначе прерываем цикл иструкцией break. */
	// Дата: 2022 / 01 / 15 Версия 1.01
	// Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
	// Исправления: нет
	/***********************************************************************/

	/* Ввод переменной x */
	char tmp; // объявление временной переменной типа char
	while (true) {
		printf_s("\nВведите корректное значение x (x - вещественное)\n"); // приглашение

		/* введенное значение присваивается переменной x по ссылке
		mark инициализируется значением, возвращенным scanf_s
		если разделитель точка, временной переменной tmp присвоится первый символ после точки */
		int mark = scanf_s("%lf.%c", &x, &tmp, sizeof(tmp)); 
		scanf_s("%*[^\n]"); // Очистка буфера ввода

		/* Проверка корректности введенного значения */
		if (mark == 0) { // если переменная не инициализирована
			printf_s("Ошибка ввода – неверное значение x\n");
		}
		else if (mark > 1) { // если в при вводе инициализирована переменная tmp
			printf_s("Ошибка ввода - используйте запятую в качестве разделителя\n");
		}
		else break;
	}
}

bool Calculate(double& result, double x) {
	// Цель: Вычисление значения выражения:
	//  D = ((x-1)(x-3)(x-7)…(x-63))/((x-2)(x-4)(x-8)…(x-64))
	// Исходные данные:
	//		result – ссылка на переменную, содержащую результат вычислений
	//		x – значение переменной, используемой в вычислениях
	// Результат:
	//		если обнаружена попытка деления на 0 функция возвращает ложь;
	//		если вычиления произведены успешно:
	//			- переменной result присвоено значение результата вычислений 
	//			по соответствующей ссылке.
	//			 - функция возвращает истину;
	// Вызываемые модули: нет
	/* Описание алгоритма :
	* 1) создаются переменные-аккумуляторы, соответствующие числителю и знаменателю выражения
	* 2) в цикле переменная i, соответствующая значению показателя степени числа 2,
	* принимает значения от 1 до 6 включительно
	* для каждой итерации цикла:
	*	2.1 вычисляется значение очередного множителя знаменателя (равное x - 2^i) 
	*	и аккумулируется в переменную-знаменатель.
	*	2.2 если знаменатель становится равным 0 функция завершается инстуркцией return
	*	и возвращает значение, соответствующее ошибке.
	*	2.3 вычисляется значение очередного множителя числителя (равное x - (2^i - 1)) 
	*	и аккумулируется в переменную-числитель.
	*	2.4 если числитель становится равным 0, переменной-значению выражения по ссылке
		присваивается значение 0, функция завершается инструкцией return и возвращает
		значение, соответствующее успешному завершению.
	3) после выхода из цикла вычисляется значение выражения, и присваивается переменной 
	по ссылке, функция завершается инструкцией return и возвращает значение, соответствующее
	успешному завершению.*/
	// Дата: 2022 / 01 / 15 Версия 1.01
	// Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
	// Исправления: нет
	/***********************************************************************/

	/* объявление переменных, соответствующих числителю и знаменателю */
	double numerator{ 1 }, denominator{ 1 };

	/* в цикле выполняем проход по значениям показателя степени числа 2 */
	for (int i = 1; i < 7; i++) {
		denominator *= x - pow(2, i); // знаменатель домножается на очередной множитель
		if (denominator == 0) { // если знаменатель обращается в ноль
			return false;       // функция возвращает значение, соответствующее ошибке
		}
		numerator *= x - (pow(2, i) - 1); // числитель домножается на очередной множитель
		if (numerator == 0) { // если числитель обращается в 0
			result = 0;       // переменной, содержащей результат вычисления 
			                  // присваивается значение  0
			return true; // функция возвращает значение, соответствующее успешному выполнению
		}
	}
	/* после вычисления числителя и знаменателя результат вычисления присваивается
	соответствующей переменной по ссылке*/
	result = numerator / denominator;
	return true; // функция возвращает значение, соответствующее успешному выполнению
}
